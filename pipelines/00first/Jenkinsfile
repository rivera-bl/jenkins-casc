pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/rivera-bl/spring-boot-kubernetes'
            }
        }
        stage('Build') {
            steps {
              sh './mvnw package'
            }
        }
        stage('OWASP DependencyCheck') {
            steps {
              dependencyCheck additionalArguments: '''
                  -o "./"
                  -s "./target/spring-boot-kubernetes-0.0.1-SNAPSHOT.jar"
                  -f "ALL"
                  --prettyPrint''', odcInstallation: 'devsecops'

              dependencyCheckPublisher (
                failedNewHigh: 1,
                failedTotalHigh: 1,
                pattern: 'dependency-check-report.xml'
              )

              script {
                if (currentBuild.result == 'UNSTABLE') {
                   unstable('UNSTABLE: Dependency check')
                } else if (currentBuild.result == 'FAILURE') {
                   error('FAILED: Dependency check')
                }
              }
            }
        }
        stage('SonarCloud') {
          environment {
            SCANNER_HOME = tool 'SonarQubeScanner'
            ORGANIZATION = "rivera-bl"
            PROJECT_NAME = "spring-boot-kubernetes"
          }
          steps {
            withSonarQubeEnv(installationName: 'SonarCloudURL', credentialsId: 'sonarcloud') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.organization=$ORGANIZATION \
                -Dsonar.java.binaries=.mvn/wrapper/ \
                -Dsonar.projectKey=$PROJECT_NAME \
                -Dsonar.sources=.'''
            }
          }
        }
        stage("QualityGate") {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
